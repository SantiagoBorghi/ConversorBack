// <auto-generated />
using System;
using ConversorBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConversorBack.Migrations
{
    [DbContext(typeof(ConversorDeMonedaContext))]
    [Migration("20240811021240_ConversorDB")]
    partial class ConversorDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("ConversorBack.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IC")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ARS",
                            IC = 0.002,
                            Name = "Peso Argentino",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "USD",
                            IC = 1.0,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 3,
                            Code = "EUR",
                            IC = 1.0900000000000001,
                            Name = "Euro",
                            Symbol = "€"
                        });
                });

            modelBuilder.Entity("ConversorBack.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("MaxConversions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxConversions = 10ul,
                            Type = "Free"
                        },
                        new
                        {
                            Id = 2,
                            MaxConversions = 100ul,
                            Type = "Standard"
                        },
                        new
                        {
                            Id = 3,
                            MaxConversions = 999999999ul,
                            Type = "Pro"
                        });
                });

            modelBuilder.Entity("ConversorBack.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("TotalConversions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
